{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","process","setProcess","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","_ref2","_callee2","id","_context2","getAllComics","_ref3","_callee3","_args3","_context3","_transformComics","getComic","_ref4","_callee4","_context4","_x2","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getCharacterByName","_ref5","_callee5","_context5","_x3","Skeleton","_jsxs","_Fragment","children","className","setContent","Component","Spinner","View","thumbnailStyle","href","RandomChar","setChar","_useMarvelService","useEffect","updateChar","onCharLoaded","Math","floor","random","then","onClick","mjolnir","CharList","props","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","setOffset","_useState7","_useState8","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","focusRef","useRef","onSetFocus","current","forEach","item","classList","remove","add","focus","newCharList","ended","charlist","_toConsumableArray","elements","useMemo","arr","i","imgStyle","CSSTransition","timeout","classNames","tabIndex","ref","el","e","onCharSelected","onKeyPress","key","TransitionGroup","component","renderItems","disabled","lenght","CharInfo","charId","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","error","_createClass","value","errorInfo","console","log","this","setState","CharSearchForm","errorMessage","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","MainPage","selectedChar","Helmet","content","decoration"],"mappings":"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","file":"static/js/6.1b0c0d10.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"error\" />\n    );\n}\n\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {request, clearError, process, setProcess} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=4c99d2861f7069bd64ba326558540525';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async (offset = 0) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\n        return _transformComics(res.data.results[0]);\n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\n        return res.data.results;\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\t// optional chaining operator\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n        }\n    }\n\n    return {clearError,\n            process,\n            setProcess,\n            getAllCharacters,\n            getCharacter,\n            getCharacterByName,\n            getAllComics,\n            getComic}\n\n}\n\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setProcess('loading'); \n\n        try {\n            const response = await fetch(url, {method, body, headers});\n            \n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`)\n            }\n\n            const data = await response.json();\n\n            return data;\n        } catch(e) {\n            setProcess('error');\n            throw e;\n        }\n\n    }, [])\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []);\n\n    return {request, clearError, process, setProcess}\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Skeleton from \"../components/skeleton/Skeleton\";\nimport Spinner from \"../components/spinner/Spinner\";\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton/>;\n            break;\n        case 'loading':\n            return <Spinner/>;\n            break;\n        case 'confirmed':\n            return <Component data={data}/>;\n            break;\n        case 'error':\n            return <ErrorMessage/>\n            break;\n        default:\n            throw new Error('Unexpected process state')\n    }\n}\n\nexport default setContent;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useEffect, useState } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent'\n\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    \n\n    return (\n        <div className=\"randomchar\">\n            { setContent(process, View, char) }\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\">\n                    <div className=\"inner\" onClick={updateChar}>try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    const thumbnailStyle = thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ? {objectFit: 'contain'} : {objectFit: 'cover'};\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" style={thumbnailStyle} className=\"randomchar__img\"/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef, useMemo} from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\n// import setContent from '../../utils/setContent';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n            break;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>\n            break;\n        case 'confirmed':\n            return <Component/>;\n            break;\n        case 'error':\n            return <ErrorMessage/>\n            break;\n        default:\n            throw new Error('Unexpected process state')\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    \n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const focusRef = useRef([]);\n\n    const onSetFocus = (id) => {\n        focusRef.current.forEach(item => {\n            item.classList.remove('char__item_selected');\n        });\n        focusRef.current[id].classList.add('char__item_selected');\n        focusRef.current[id].focus();\n    }\n\n    const onCharListLoaded = (newCharList) => {\n\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charlist => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended)\n    }\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                    className=\"char__item\"\n                    tabIndex={0}\n                    \n                    ref={el => focusRef.current[i] = el}\n                    onClick={(e) => {props.onCharSelected(item.id); onSetFocus(i)}}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            onSetFocus(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n                \n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading)\n    // eslint-disable-next-line\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n            { elements }\n            <button\n            className=\"button button__main button__long\"\n            disabled={newItemLoading}\n            style={{display: charEnded ? 'none' : 'block'}}\n            onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useEffect, useState } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent'\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n\n    }\n\n    return (\n        <div className=\"char__info\">\n            { setContent(process, View, char) }\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n    const thumbnailStyle = thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ? {objectFit: 'contain'} : {objectFit: 'cover'};\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={thumbnailStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.lenght > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        if(i < 10) {\n                            return (\n                                <li className=\"char__comics-item\" key={i}>\n                                    {item.name}\n                                </li>\n                            );\n                        }\n                    })\n                }\n            </ul>\n        </>\n    );\n}\n\nexport default CharInfo;","import { Component } from \"react\";\n\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup'\nimport useMarvelService from '../../services/MarvelService';\nimport { useState } from 'react';\nimport {Link} from 'react-router-dom';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (charName) => {\n        clearError();\n\n        getCharacterByName(charName)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const results = !char ? null : char.length > 0 ?\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div> :\n                    <div className=\"char__search-error\">\n                        The character was not found. Check the name and try again\n                    </div>;\n\n\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues={{ charName: ''}}\n                validationSchema={Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit={({charName}) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field \n                            id=\"charName\" \n                            name='charName' \n                            type='text' \n                            placeholder=\"Enter name\"/>\n                        <button \n                            type='submit' \n                            className=\"button button__main\"\n                            disabled={process === 'loading'}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\"/>\n                </Form>\n            </Formik>\n            {errorMessage}\n            {results}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","import { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\n\nconst MainPage = () => {\n\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id)\n    }\n\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Marvel information portal\"\n                />\n                <title>Marvel information portal</title>\n            </Helmet>\n            <RandomChar/>\n            <div className=\"char__content\">\n                <CharList onCharSelected={onCharSelected}/>\n                <div>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar}/>\n                    </ErrorBoundary>\n                    <CharSearchForm/>\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    );\n}\n\nexport default MainPage;"],"sourceRoot":""}